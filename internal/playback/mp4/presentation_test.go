package mp4

import (
	"bytes"
	"testing"

	"github.com/bluenviron/mediacommon/pkg/formats/fmp4"
	"github.com/bluenviron/mediamtx/internal/test"
	"github.com/stretchr/testify/require"
)

var casesPresentation = []struct {
	name string
	dec  Presentation
	enc  []byte
}{
	{
		"standard",
		Presentation{
			Tracks: []*Track{
				{
					ID:         1,
					TimeScale:  90000,
					TimeOffset: -90000,
					Codec: &fmp4.CodecH264{
						SPS: test.FormatH264.SPS,
						PPS: test.FormatH264.PPS,
					},
					Samples: []*Sample{
						{
							Duration:    90000,
							PTSOffset:   -45000,
							PayloadSize: 2,
							GetPayload: func() ([]byte, error) {
								return []byte{1, 2}, nil
							},
						},
						{
							Duration:    90000,
							PayloadSize: 2,
							GetPayload: func() ([]byte, error) {
								return []byte{3, 4}, nil
							},
						},
						{
							Duration:    90000,
							PTSOffset:   -45000,
							PayloadSize: 2,
							GetPayload: func() ([]byte, error) {
								return []byte{5, 6}, nil
							},
						},
					},
				},
			},
		},
		[]byte{
			0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70,
			0x69, 0x73, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x01,
			0x69, 0x73, 0x6f, 0x6d, 0x69, 0x73, 0x6f, 0x32,
			0x6d, 0x70, 0x34, 0x31, 0x6d, 0x70, 0x34, 0x32,
			0x00, 0x00, 0x02, 0xbf, 0x6d, 0x6f, 0x6f, 0x76,
			0x00, 0x00, 0x00, 0x6c, 0x6d, 0x76, 0x68, 0x64,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8,
			0x00, 0x00, 0x07, 0xd0, 0x00, 0x01, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x4b,
			0x74, 0x72, 0x61, 0x6b, 0x00, 0x00, 0x00, 0x5c,
			0x74, 0x6b, 0x68, 0x64, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0xd0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x07, 0x80, 0x00, 0x00, 0x04, 0x38, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x24, 0x65, 0x64, 0x74, 0x73,
			0x00, 0x00, 0x00, 0x1c, 0x65, 0x6c, 0x73, 0x74,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x0f, 0xa0, 0x00, 0x01, 0x5f, 0x90,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3,
			0x6d, 0x64, 0x69, 0x61, 0x00, 0x00, 0x00, 0x20,
			0x6d, 0x64, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x5f, 0x90, 0x00, 0x02, 0xbf, 0x20,
			0x55, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d,
			0x68, 0x64, 0x6c, 0x72, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x76, 0x69, 0x64, 0x65,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65,
			0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
			0x00, 0x00, 0x00, 0x01, 0x6e, 0x6d, 0x69, 0x6e,
			0x66, 0x00, 0x00, 0x00, 0x14, 0x76, 0x6d, 0x68,
			0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x24, 0x64, 0x69, 0x6e, 0x66, 0x00, 0x00, 0x00,
			0x1c, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x0c, 0x75, 0x72, 0x6c, 0x20, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x01, 0x2e, 0x73, 0x74, 0x62,
			0x6c, 0x00, 0x00, 0x00, 0x96, 0x73, 0x74, 0x73,
			0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x86, 0x61, 0x76, 0x63,
			0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x07, 0x80, 0x04, 0x38, 0x00, 0x48, 0x00,
			0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xff, 0x00,
			0x00, 0x00, 0x30, 0x61, 0x76, 0x63, 0x43, 0x01,
			0x42, 0xc0, 0x28, 0x03, 0x01, 0x00, 0x19, 0x67,
			0x42, 0xc0, 0x28, 0xd9, 0x00, 0x78, 0x02, 0x27,
			0xe5, 0x84, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00,
			0x00, 0x03, 0x00, 0xf0, 0x3c, 0x60, 0xc9, 0x20,
			0x01, 0x00, 0x04, 0x08, 0x06, 0x07, 0x08, 0x00,
			0x00, 0x00, 0x18, 0x73, 0x74, 0x74, 0x73, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0x03, 0x00, 0x01, 0x5f, 0x90, 0x00,
			0x00, 0x00, 0x28, 0x63, 0x74, 0x74, 0x73, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x00, 0x01, 0xff, 0xff, 0x50, 0x38, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x01, 0xff, 0xff, 0x50, 0x38, 0x00,
			0x00, 0x00, 0x1c, 0x73, 0x74, 0x73, 0x63, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x73,
			0x74, 0x73, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x73,
			0x74, 0x63, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0xe7, 0x00,
			0x00, 0x00, 0x0e, 0x6d, 0x64, 0x61, 0x74, 0x01,
			0x02, 0x03, 0x04, 0x05, 0x06,
		},
	},
}

func TestPresentationMarshal(t *testing.T) {
	for _, ca := range casesPresentation {
		t.Run(ca.name, func(t *testing.T) {
			var buf bytes.Buffer
			err := ca.dec.Marshal(&buf)
			require.NoError(t, err)
			require.Equal(t, ca.enc, buf.Bytes())
		})
	}
}
